#!/bin/bash

AUTHY_URL="https://api.authy.com"
APP_ROOT=`dirname $0`
CONFIG_FILE="$APP_ROOT/authy-ssh.conf"

function require_curl() {
    curl --help 2>&1 > /dev/null

    if [ $? -ne 0 ]
    then
        echo "install curl and try again"
        run_shell
    fi
}

function check_config_file() {
    if [[ ! -f $CONFIG_FILE ]]
    then
        echo "Generating config file $CONFIG_FILE"
        echo "banner=Your token was accepted." > $CONFIG_FILE
        echo "api_key=replace_me" >> $CONFIG_FILE
    fi
    return 0
}

# Usage: $(read_config banner)
function read_config() {
    key="$1"

    if [[ ! -f $CONFIG_FILE ]]
    then
        echo "ERROR: $config_file couldn't be found"
        run_shell
    fi

    while IFS='=' read -r ckey value
    do
        if [[ $ckey == $key ]]
        then
            echo $value # don't stop the loop to be able to read repeated keys
        fi
    done < $CONFIG_FILE
}

# usage: register_user "local_user" "<email>" "<country-code>" "<cellphone>"
function register_user() {
    local_user=$1
    url="$AUTHY_URL/protected/json/users/new?api_key=${AUTHY_API_KEY} -d user[email]=$2 -d user[country_code]=$3 -d user[cellphone]=$4 -s"

    response=`curl ${url} 2>/dev/null`
    ok=true

    if [[ $response == *cellphone* ]]
    then
        echo "Cellphone is invalid"
        ok=false
    fi

    if [[ $response == *email* ]]
    then
        echo "Email is invalid"
        ok=false
    fi

    if [ ! $ok ]
    then
        exit 1
    fi

    if [[ $response == *user*id* ]]
    then
        user_id=`echo $response | grep -Po '\d+'`
        echo "user=$local_user:$user_id" >> $CONFIG_FILE
        echo "User was registered"
    elif [[ $response == "invalid key" ]]
    then
        echo "The api_key value in $CONFIG_FILE is not valid"
    else
        echo "Unknown response: $response"
    fi
}

function run_shell() {
    if [ $SSH_ORIGINAL_COMMAND ] # when user runs: ssh server <command>
    then
        $SSH_ORIGINAL_COMMAND
        exit 0
    elif [ $SHELL ] # when user runs: ssh server
    then
        $SHELL
        exit 0
    fi
}

function find_authy_id() {
    for user in `read_config user`
    do
        IFS=":"; declare -a authy_user=($user)
        if [[ ${authy_user[0]} == $USER ]]
        then
            echo ${authy_user[1]}
            return 0
        fi
    done
}

function login() {
    authy_token="$1"
    authy_id=$(find_authy_id)

    url="$AUTHY_URL/protected/json/verify/${authy_token}/${authy_id}?api_key=${AUTHY_API_KEY}"
    response="`curl ${url} 2>/dev/null`"

    if [ $? -ne 0 ] # something went wrong when running the command, let it pass
    then
        echo "Error running curl"
        run_shell
    fi

    if [ "$response" == "valid token" ]
    then
        echo $(read_config banner)
        run_shell
    else
        echo "Invalid token. try again"
    fi
}

function request_sms() {
    authy_id=$(find_authy_id) # read authy id that matches $USER
    url="$AUTHY_URL/protected/json/sms/${authy_id}?api_key=${AUTHY_API_KEY}"

    response=`curl ${url} 2>/dev/null`

    if [[ $response == *success*true* ]]
    then
        echo "SMS message was sent"
    elif [[ $response == *\"enable_sms\"* ]]
    then
        echo "SMS is not enabled for this account"
    else
        echo "Message couldn't be sent: $response"
    fi
}

function run() {
    if [[ ! $(find_authy_id) ]] #user is not using authy, let it go
    then
        run_shell
    fi

    while :
    do
        echo -n "Authy Token (type 'sms' to request a SMS token): "
        read authy_token

        case $authy_token in
            sms) request_sms ;;
            *) login $authy_token ;;
        esac
    done
}

require_curl
check_config_file
AUTHY_API_KEY="$(read_config api_key)"


case $1 in
    register)
        register_user $2 $3 $4 $5
        ;;
    login)
        if [[ $AUTHY_API_KEY == "replace_me" ]]
        then
            echo "Cannot find a valid api key"
            run_shell
        fi
        run
        ;;
    *)
        cat <<__EOF__
Usage: authy-ssh <command> <arguments>

Available commands:

    register
        receives a list of arguments needed to register a user. usage:

        authy-ssh register <local-user> <email> <country code> <cellphone>

    login
        ask a token to the user. to use this command modify /etc/sshd_config in your server and add:

        ForceCommand bash /path/to/authy-ssh login

__EOF__
        ;;
esac
